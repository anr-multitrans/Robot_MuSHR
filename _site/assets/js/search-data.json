{"0": {
    "doc": "Machine Learning",
    "title": "Machine Learning",
    "content": " ",
    "url": "/Robot_MuSHR/docs/5_machine_learning/0_machine_learning/",
    "relUrl": "/docs/5_machine_learning/0_machine_learning/"
  },"1": {
    "doc": "MuSHR",
    "title": "Mushr Tutorials Mind Map",
    "content": ". ",
    "url": "/Robot_MuSHR/docs/noetic#mushr-tutorials-mind-map",
    "relUrl": "/docs/noetic#mushr-tutorials-mind-map"
  },"2": {
    "doc": "MuSHR",
    "title": "MuSHR",
    "content": " ",
    "url": "/Robot_MuSHR/docs/noetic",
    "relUrl": "/docs/noetic"
  },"3": {
    "doc": "Remotely control the robot with another PC",
    "title": "Remotely control the robot with another PC",
    "content": " ",
    "url": "/Robot_MuSHR/docs/4_remotely_control_the_robot_with_another_pc/0_remotely_control_the_robot_with_another_pc/",
    "relUrl": "/docs/4_remotely_control_the_robot_with_another_pc/0_remotely_control_the_robot_with_another_pc/"
  },"4": {
    "doc": "The race rebot",
    "title": "MuSHR Hardware Build",
    "content": ". ",
    "url": "/Robot_MuSHR/docs/hardware#mushr-hardware-build",
    "relUrl": "/docs/hardware#mushr-hardware-build"
  },"5": {
    "doc": "The race rebot",
    "title": "The race rebot",
    "content": " ",
    "url": "/Robot_MuSHR/docs/hardware",
    "relUrl": "/docs/hardware"
  },"6": {
    "doc": "Build Instructions",
    "title": "Build Instructions",
    "content": " ",
    "url": "/Robot_MuSHR/docs/3_the_race_rebot/1_build_instructions/",
    "relUrl": "/docs/3_the_race_rebot/1_build_instructions/"
  },"7": {
    "doc": "Build Instructions",
    "title": "Hardware Overview",
    "content": ". ",
    "url": "/Robot_MuSHR/docs/3_the_race_rebot/1_build_instructions/#hardware-overview",
    "relUrl": "/docs/3_the_race_rebot/1_build_instructions/#hardware-overview"
  },"8": {
    "doc": "Connecting",
    "title": "Connecting",
    "content": " ",
    "url": "/Robot_MuSHR/docs/4_remotely_control_the_robot_with_another_pc/1_connectin/",
    "relUrl": "/docs/4_remotely_control_the_robot_with_another_pc/1_connectin/"
  },"9": {
    "doc": "Connecting",
    "title": "1. Check the IP address on the robot",
    "content": "$ ifconfig . Trying to connect your robot to a wifi with a static IP address, so that you don’t have to connect the screen, mouse, and keyboard to the TX2 to check the IP address every time you boot the robot, and it may changes often which is very inconvenient. ",
    "url": "/Robot_MuSHR/docs/4_remotely_control_the_robot_with_another_pc/1_connectin/#1-check-the-ip-address-on-the-robot",
    "relUrl": "/docs/4_remotely_control_the_robot_with_another_pc/1_connectin/#1-check-the-ip-address-on-the-robot"
  },"10": {
    "doc": "Connecting",
    "title": "2. On other workstations",
    "content": "On other workstations, connect to the robot and the container. For this to work your computer needs to be connected to the same wifi as the car. There are two ways to connect: . With the terminal: . | $ ssh [robot_name]@[IP_address] | In the same window, run $mushr_noetic Or $ docker start [container_ID] | . If you want to open multiple terminals, you also have two ways: . | you can use TMUX | Or open a new terminal and do steps i and ii again. | . with the VS code: . | open VS code, attach to the remote with SSH: Take the remote extension on Visual studio code, chose the remote explorer as remote, and check the ssh list if there is no IP address you want, move your Cursor on the ‘SSH’ and click “+”, print ssh robot@[IP address] and enter until it finished. Flash the ssh list and you will see the IP address you just added. Move the cursor to the IP address you want and attach to it the current window or a new window (suggest). | In the VS window connected to the robot remotely: Take the remote extension on Visual Studio code and switch the remote explorer to the Dev container, if there is no container name you want or you want to start a new container, open a terminal and run $ mushr_noetic. Then back to the container list and chose the one you want to attach and attached it with a new window (we suggest keeping the vs code window which is attached to the robot to be able to shut down the robot at the end). | . If there is an error about connection, most probably you connect to a wifi with a dynamic IP address and the ID has changed. You have to find the new one with $ ifconfig on the robot again, then redo all the connect steps above to connect it. ",
    "url": "/Robot_MuSHR/docs/4_remotely_control_the_robot_with_another_pc/1_connectin/#2-on-other-workstations",
    "relUrl": "/docs/4_remotely_control_the_robot_with_another_pc/1_connectin/#2-on-other-workstations"
  },"11": {
    "doc": "Data Collecting",
    "title": "Data Collecting",
    "content": " ",
    "url": "/Robot_MuSHR/docs/5_machine_learning/1_data_collecting/",
    "relUrl": "/docs/5_machine_learning/1_data_collecting/"
  },"12": {
    "doc": "Data Collecting",
    "title": "1. Connect to PS4 controller",
    "content": " ",
    "url": "/Robot_MuSHR/docs/5_machine_learning/1_data_collecting/#1-connect-to-ps4-controller",
    "relUrl": "/docs/5_machine_learning/1_data_collecting/#1-connect-to-ps4-controller"
  },"13": {
    "doc": "Data Collecting",
    "title": "2. Check all the sensors needed are working",
    "content": "$ rostopic list . Topics we may need: . /car/[camera_name]/color/image_raw: RBG image from camera_name /car/[camera_name]/color/image_rect_raw: RBG image from camera_name with frequency less than default as image raw so that the latency is less. /car/[camera_name]/depth/image_raw: Depth image from camera_name /car/[camera_name]/depth/image_rect_raw: Depth image from camera_name with frequency we defined. /car/scan/: data from lidar . ",
    "url": "/Robot_MuSHR/docs/5_machine_learning/1_data_collecting/#2-check-all-the-sensors-needed-are-working",
    "relUrl": "/docs/5_machine_learning/1_data_collecting/#2-check-all-the-sensors-needed-are-working"
  },"14": {
    "doc": "Data Collecting",
    "title": "3. Connecting data by Rosbag",
    "content": "rosbag/Commandline - ROS Wiki . Run the below commands: . | If you want to choose the name of the files (“bag_name”) yourself you can do this instead: $ rosbag record -O path/[bag_name].bag [topic_name_1] [topic_name_2] … . | . Ex. $ rosbag record -O /home/…./test_data.bag /car/[camera_name]/depth/image_raw /car/[camera_name]/color/image_raw . The bag file is normally big a few G. Suggest saving the bag in an SD card with more space. Be careful, the car doesn’t have a lot of memory and it can crash. | If you only do $ rosbag record [topic] . it will gives a bag_name automatically (date + hour) . | . We can redo the same command to obtain more topics but we have to use the new ‘bag_name’, otherwise it will cover the old one . We strongly recommend that you record the bag file on SD and try to transfer it to your own computer after that. ",
    "url": "/Robot_MuSHR/docs/5_machine_learning/1_data_collecting/#3-connecting-data-by-rosbag",
    "relUrl": "/docs/5_machine_learning/1_data_collecting/#3-connecting-data-by-rosbag"
  },"15": {
    "doc": "Data Collecting",
    "title": "4. Contro the race robot with a PS4 controller",
    "content": " ",
    "url": "/Robot_MuSHR/docs/5_machine_learning/1_data_collecting/#4-contro-the-race-robot-with-a-ps4-controller",
    "relUrl": "/docs/5_machine_learning/1_data_collecting/#4-contro-the-race-robot-with-a-ps4-controller"
  },"16": {
    "doc": "MuSHR simulation setup",
    "title": "MuSHR simulation setup",
    "content": "Learn how to simulate the MuSHR Car. This tutorial is for Linux or MacOS users only. ",
    "url": "/Robot_MuSHR/docs/2_mushr/1_mushr_simulation_setup/",
    "relUrl": "/docs/2_mushr/1_mushr_simulation_setup/"
  },"17": {
    "doc": "MuSHR simulation setup",
    "title": "Table of contents",
    "content": ". | MuSHR simulation setup . | MuSHR Docker Container . | Installing Docker | Installing MuSHR Docker Container . | Clone the MuSHR repository at catkin_ws/src | Run the installation script | . | Run the MuSHR Docker Container | . | . | . ",
    "url": "/Robot_MuSHR/docs/2_mushr/1_mushr_simulation_setup/#table-of-contents",
    "relUrl": "/docs/2_mushr/1_mushr_simulation_setup/#table-of-contents"
  },"18": {
    "doc": "MuSHR simulation setup",
    "title": "MuSHR Docker Container",
    "content": "Installing Docker . First, install Docker and Docker Compose for your machine. |   | Version | . | Docker | 20+ | . | Docker Compose | 1.29+ | . This tutorial does not apply on Jetson. Because some JetPack has Docker built in (Check your JetPack version), reinstalling it will cause problems. Please go to the race robot section. If on Linux, follow the post install steps to make sure you can run Docker without root privileges. Installing MuSHR Docker Container . Clone the MuSHR repository at catkin_ws/src . $ mkdir -p catkin_ws/src $ cd catkin_ws/src $ git clone --branch noetic https://github.com/prl-mushr/mushr.git . Run the installation script . $ ./mushr/mushr_utils/install/mushr_install.bash . It will prompt you with two questions. | For running the MuSHR simulator, the answers should be no, no. | For running the MuSHR racecar, when ask “Are you installing on robot and need all the sensor drivers? (y/n)” respond “y” so that the sensor drivers are installed. | . You can edit code outsideor inside the docker container. Other files made inside the docker container will not persist unless you commit. Run the MuSHR Docker Container . open a new terminal and run: . $ mushr_noetic . The first time running this command will take some time to download the Docker image. If the prefix switches to root, the installation was successful. $ mushr_noetic will generate a new container, and if you want to use the same container, you can run $ docker exec -it [CONTAINER_ID] bash. View Container ID run $ docker ps. In the same terminal (within the Docker container), build the MuSHR software stack. (First run or when there is an update.) . $ source .bashrc &amp;&amp; cd catkin_ws &amp;&amp; catkin build . ",
    "url": "/Robot_MuSHR/docs/2_mushr/1_mushr_simulation_setup/#mushr-docker-container",
    "relUrl": "/docs/2_mushr/1_mushr_simulation_setup/#mushr-docker-container"
  },"19": {
    "doc": "Jetson",
    "title": "Jetson Driver Installation",
    "content": " ",
    "url": "/Robot_MuSHR/docs/3_the_race_rebot/2_Jetson/#jetson-driver-installation",
    "relUrl": "/docs/3_the_race_rebot/2_Jetson/#jetson-driver-installation"
  },"20": {
    "doc": "Jetson",
    "title": "Jetson TX2",
    "content": "1. Flash TX2 with your laptop . First, download the user guidebook from TX2 user guide, and go to the “how to install jetpack” part and follow the instructions. You are required to perform 4 steps, here are some highlights and additions: . Step 1: Download and install NVIDIA SDK Manager on the Linux host computer. | Supported host operating systems are Ubuntu Linux x64 Version 18.04 or 16.04. | You will be asked to make an account before downloading NVIDIA SDK Manage. | . Step 2: Connect your developer kit to the Linux host computer. For flashing, you don’t have to connect the display, keyboard, and mouse, only USB Micro AB to connect the TX2, computer, and AC adapter. Step 3: Put your developer kit into Force Recovery Mode. [19] - Power Button . [20] - Force Recovery Button . Step 4: Use SDK Manager to select and install desired components. | Go to SDK Manager documentation and choose to Install Jetson Software with SDK Manager. | Normally, we set the username and password below: . | Username: robot (if you have more than one race robot, name it with _[number]) | Password: prl_robot | . | Internet connection error: try another internet (best with a static IP address). | . 2. Connect TX2 . Once done, connect TX2 with the screen, the mouse, and the keyboard. Now, you can operate directly on TX2. You can perform the following operations: . | Connect to the wifi | (Optional)Update Ubuntu software: $ sudo apt-get update $ sudo apt-get upgrade . A window will pop up and there will be a question about configuring docker.io: “Automatically restart Docker daemon”? -&gt; The answer is YES . | . 3. Boot and reboot . | Boot: press the power button | Shut down: . | Click the power off when you have a screen, keyboard, and mouse connected to the TX2. | In the terminal (also works on other PC connected to TX2 remotely): $ sudo shutdown -P now | Force shutdown or in case of a crash, press the car’s power button for 10s. | . | . ",
    "url": "/Robot_MuSHR/docs/3_the_race_rebot/2_Jetson/#jetson-tx2",
    "relUrl": "/docs/3_the_race_rebot/2_Jetson/#jetson-tx2"
  },"21": {
    "doc": "Jetson",
    "title": "Jetson Nano",
    "content": " ",
    "url": "/Robot_MuSHR/docs/3_the_race_rebot/2_Jetson/#jetson-nano",
    "relUrl": "/docs/3_the_race_rebot/2_Jetson/#jetson-nano"
  },"22": {
    "doc": "Jetson",
    "title": "Jetson",
    "content": " ",
    "url": "/Robot_MuSHR/docs/3_the_race_rebot/2_Jetson/",
    "relUrl": "/docs/3_the_race_rebot/2_Jetson/"
  },"23": {
    "doc": "Data processing, model training, and testing",
    "title": "Data processing, model training, and testing",
    "content": "Check the code of the best team of the hackathon. You will probably need some specific library to execute your model: . | Scipy: $ python -m pip install scipy | Torch, torchvision, torchaudio (?) $ pip3 install torch torchvision torchaudio | Cv_bridge | . On windows, it is necessary to have ROS to obtain cv_bridge. Note, once you have a ROS, make sure your Python environment is connected to it. ",
    "url": "/Robot_MuSHR/docs/5_machine_learning/2_data_processing_model_training_and_testing/",
    "relUrl": "/docs/5_machine_learning/2_data_processing_model_training_and_testing/"
  },"24": {
    "doc": "Data processing, model training, and testing",
    "title": "Data preprocessing",
    "content": "The link of the code. Modify the data path. ",
    "url": "/Robot_MuSHR/docs/5_machine_learning/2_data_processing_model_training_and_testing/#data-preprocessing",
    "relUrl": "/docs/5_machine_learning/2_data_processing_model_training_and_testing/#data-preprocessing"
  },"25": {
    "doc": "Data processing, model training, and testing",
    "title": "Model training",
    "content": "The link of the code. Use the NEF server in Inria. | Request an account | Login | Run your code with some sample script | . ",
    "url": "/Robot_MuSHR/docs/5_machine_learning/2_data_processing_model_training_and_testing/#model-training",
    "relUrl": "/docs/5_machine_learning/2_data_processing_model_training_and_testing/#model-training"
  },"26": {
    "doc": "Data processing, model training, and testing",
    "title": "Model testing",
    "content": "You can test your model on your own PC with a bag playing. To do this you need to install ros on your computer first. ",
    "url": "/Robot_MuSHR/docs/5_machine_learning/2_data_processing_model_training_and_testing/#model-testing",
    "relUrl": "/docs/5_machine_learning/2_data_processing_model_training_and_testing/#model-testing"
  },"27": {
    "doc": "Install ROS1",
    "title": "Install ROS1",
    "content": "We are using the latest version of ROS1 - Noetic. ",
    "url": "/Robot_MuSHR/docs/2_mushr/2_install_ros1/",
    "relUrl": "/docs/2_mushr/2_install_ros1/"
  },"28": {
    "doc": "Install ROS1",
    "title": "For Ubuntu",
    "content": "Follow the official tutorial: noetic/Installation/Ubuntu - ROS Wiki . The ROS 1 - Noetic only supports ubuntu 20. REP 3 – Target Platforms (ROS.org) . For Windows users who are using Ubuntu VM, don’t forget to choose the right version of Ubuntu (Ubuntu 20) in the settings: . ",
    "url": "/Robot_MuSHR/docs/2_mushr/2_install_ros1/#for-ubuntu",
    "relUrl": "/docs/2_mushr/2_install_ros1/#for-ubuntu"
  },"29": {
    "doc": "Install ROS1",
    "title": "For Windows Users",
    "content": "Follow the official tutorial: noetic/Installation/Windows - ROS Wiki. -&gt; for Visual Studio: download Visual Studio 2019 (Community is enough) at Downloads - Visual Studio Subscriptions Portal. Note: Choose a ROS python environment on Visual Studio to be able to execute the files, and you have to re-install the package you need (scipy, torch, torchvision, torchaudio) on the Visual Studio terminal. You have also a video tutorial about how to install ROS1 on Windows 11 : How to Install ROS On Windows Natively. ",
    "url": "/Robot_MuSHR/docs/2_mushr/2_install_ros1/#for-windows-users",
    "relUrl": "/docs/2_mushr/2_install_ros1/#for-windows-users"
  },"30": {
    "doc": "Visualization by Foxglove",
    "title": "Visualization by Foxglove",
    "content": ". This tutorial is for MacOS or Linux users only. ",
    "url": "/Robot_MuSHR/docs/4_remotely_control_the_robot_with_another_pc/2_visualization_by_foxglove/",
    "relUrl": "/docs/4_remotely_control_the_robot_with_another_pc/2_visualization_by_foxglove/"
  },"31": {
    "doc": "Visualization by Foxglove",
    "title": "Foxglove Studio",
    "content": "We can use Foxglove Studio to visualize our robot and map. Downloading Foxglove Studio . Make sure foxglove is the latest version. Import layout . Open Foxglove Studio, and click the “Layouts” button on the left panel (second from top) and then click Import layout button pictured below. Import the preset layout from: mushr/mushr_utils/foxglove/foxglove_layout.json. MuSHR panel extension . Navigate to the Extensions tab (bottom icon on the left panel) and install the MushrTeleop extension from the Marketplace. Connecting to Data With Foxglove Studio . Start the Docker container. In the same terminal (within the Docker container), start up the simulator with the command: . $ roslaunch mushr_sim teleop.launch . After starting up, the simulator should print out a line similar to Rosbridge WebSocket server started at ws://0.0.0.0:9090 . In Foxglove, click the top button in the sidebar, labeled Data source. Then select the Plus button in the left panel. This should open up an interface to connect to data. Click the Open Connection button. Select Rosbridge (ROS 1 &amp; ROS 2) as shown below. Fill out the WebSocket URL with the url and port that the simulator output before. Then, click Open in the bottom right corner. ",
    "url": "/Robot_MuSHR/docs/4_remotely_control_the_robot_with_another_pc/2_visualization_by_foxglove/#foxglove-studio",
    "relUrl": "/docs/4_remotely_control_the_robot_with_another_pc/2_visualization_by_foxglove/#foxglove-studio"
  },"32": {
    "doc": "Auto-driving",
    "title": "Auto-driving",
    "content": ". | Modify the Python file with your model [path]/catkin_ws/src/imredd_pkg/src/FollowRoad_node.py . | compile the Python files you need to run if you just add it to catkin_ws . | Launch road following node: . $ roslaunch mushr_base teleop.launch $ roslaunch imredd_pkg follow_road.launch . Stop it with control+c . | . only when your controller is disconnected, the command messages published by follow_road will work. ",
    "url": "/Robot_MuSHR/docs/5_machine_learning/3_auto_driving/",
    "relUrl": "/docs/5_machine_learning/3_auto_driving/"
  },"33": {
    "doc": "Autonomous Navigation",
    "title": "Autonomous Navigation",
    "content": "Initialize and operate MuSHRs out-of-the-box autonomous navigation stack! By the end of the tutorial, the car should be able to autonomously navigate around known obstacles on a known map. If you are operating in simulation and use the particle filter for localization, we do not recommend testing with the sandbox.yaml default map as the localization system struggles in an open environment (all positions look the same!). ",
    "url": "/Robot_MuSHR/docs/2_mushr/3_autonomous_navigation/",
    "relUrl": "/docs/2_mushr/3_autonomous_navigation/"
  },"34": {
    "doc": "Autonomous Navigation",
    "title": "Navigation Stack Overview",
    "content": ". | Receding Horizon Controller (RHC) Node This node is responsible for motion planning and generating controls(steering, speed) for the car. | Localization Node This node is implemented using a method called Particle Filtering which relies primarily on a data stream from the laser scanner. | Planner Node This node generates a plan that the RHC controller will follow. | . ",
    "url": "/Robot_MuSHR/docs/2_mushr/3_autonomous_navigation/#navigation-stack-overview",
    "relUrl": "/docs/2_mushr/3_autonomous_navigation/#navigation-stack-overview"
  },"35": {
    "doc": "Autonomous Navigation",
    "title": "Installing the Navigation Stack",
    "content": "The docker container may already have the required packages pre-installed. These instructions have been provided in case you need to reinstall the packages from scratch. Download the packages for the RHC, Particle Filter and Global Planner: . # Go to your catkin workspace $ cd ~/catkin_ws/src # Clone the RHC node $ git clone git@github.com:prl-mushr/mushr_rhc.git # Clone the Particle Filter node $ git clone git@github.com:prl-mushr/mushr_pf.git # Install [SBPL](http://sbpl.net) for the global planner $ sudo apt-get install ros-noetic-sbpl # Install the Global Planner (this is for Jetson Xavier NX or sim use) $ git clone git@github.com:prl-mushr/mushr_gp.git # If you're using the jetson nano, use the mushr_gprm planner: $ git clone git@github.com:prl-mushr/mushr_gprm.git # Make $ cd ~/catkin_ws &amp;&amp; catkin_make . You also need to download all dependencies for the mush_rhc. The reason why there are two planners (mushr_gp and mushr_gprm) is because mushr_gp is too resource intensive to be run on the jetson nano 4GB variant. However, if the desktop/laptop computer remains connected and in range of the MuSHR car, you can run mushr_gp on the computer instead as they share the same ROS master. If you need the planner to run on the jetson nano, we recommend using the mushr_gprm package. For the Jetson Xavier NX or when running on the sim exclusively, mushr_gp will work. Both repositories contain ROS packages that reproduce the desired functionality. You need only concern yourself with each package’s launch files to use them effectively. You can find the launch files in each package’s launch directory. ",
    "url": "/Robot_MuSHR/docs/2_mushr/3_autonomous_navigation/#installing-the-navigation-stack",
    "relUrl": "/docs/2_mushr/3_autonomous_navigation/#installing-the-navigation-stack"
  },"36": {
    "doc": "Autonomous Navigation",
    "title": "Starting the navigation stack",
    "content": "Starting the docker image . If you’re operating on the robot, you’ll need to SSH into it. As we are running the entire system from docker, the first thing to do is to start the docker image. To do this, execute: Turn on the car and vesc by plugging their batteries in. Enter the docker container. $ mushr_noetic or $ docker exec -it [CONTAINER_ID] bash if you don’t want to start a new container. If you will use tmux, once you’ve ssh’d into your robot and started the docker image, activate tmux: $ tmux . Note: If the map you are using is very large map (&gt;100x100 meters)–size inclusive of the unknown region–then the controller will be stuck sampling points. Save yourself the headache and shrink/crop your map before you begin. Starting the system . On the MuSHR robot . Launch teleop.launch. All these basic features are handled by a single launch file called teleop.launch. $ roslaunch mushr_base teleop.launch . launch the map_server: . # Make sure mushr/mushr_base/mushr_base/mushr_base/maps has your map # and mushr_base/launch/includes/map_server.launch is set to your map $ roslaunch mushr_base map_server.launch . launch the localization node: $ roslaunch mushr_pf real.launch . Wait for the node to initialize: . $ Vesc callback called for first time.... $ Initialization complete . activate the RHC node: $ roslaunch mushr_rhc real.launch . Wait for the code to initialize: . MPC Control Node Initialized . Finally, launch the global planner node (use the planner appropriate for your system): $ roslaunch mushr_gp real.launch or $ roslaunch mushr_gprm real.launch . Wait for it to initialize: . [ INFO] [1658309032.479218601]: Planner ROS node constructed. Need to initialize state [ INFO] [1658309032.644907822]: Resizing the map [ INFO] [1658309033.229219658]: Environment initialized [ INFO] [1658309033.261994212]: Updated costmap . In simulation . When running in simulation, the steps are more or less the same as those for the real car, with the difference being that . | We use the mushr_sim package to start the teleop.launch | Absence of the particle filter (not necessary in simulation) | Differences in the names of the launch files (instead of real.launch we use sim.launch) | . Launch teleop.launch form mushr_sim: $ roslaunch mushr_sim teleop.launch . activate the RHC node and Wait for the code to initialize. $ roslaunch mushr_rhc sim.launch . Finally, launch the global planner node and Wait for it to initialize: $ roslaunch mushr_gp sim.launch . Running the navigation stack . To operate the navigation stack, we will use foxglove to send pose targets to the vehicle. When operating in the real world, the pose estimate of the car may be incorrect. You can correct this by providing the particle filter with the correct pose estimate using the Set Pose Estimate button on the bottom right of the foxglove window and then using the button to publish clicked points. In simulation, you may want to set the starting pose of the car at a certain point. To do this, click the Set Pose button on the bottom right of the foxglove window and use Publish point to publish a point or Publish Pose to publish a pose for the car: . To set a pose target, click on Set Goal button on the bottom right of the foxglove window and use Publish pose to publish a goal pose for the car: . The following video demonstrates the process of starting and running the stack in sim. In the real world, the difference would be the launch files being executed, and possibly the requirement to set the initial pose estimate. ",
    "url": "/Robot_MuSHR/docs/2_mushr/3_autonomous_navigation/#starting-the-navigation-stack",
    "relUrl": "/docs/2_mushr/3_autonomous_navigation/#starting-the-navigation-stack"
  },"37": {
    "doc": "Robot Software Setup",
    "title": "Robot Software Setup",
    "content": "This tutorial will get your car up and running teleoperation. ",
    "url": "/Robot_MuSHR/docs/3_the_race_rebot/3_robot_software_setup/",
    "relUrl": "/docs/3_the_race_rebot/3_robot_software_setup/"
  },"38": {
    "doc": "Robot Software Setup",
    "title": "Software Overview",
    "content": ". The following are required before continuing with installing the necessary libraries. | SD card flashed with the latest [NVIDIA Jetpack]{https://developer.nvidia.com/embedded/jetpack} image. | Internet (either WiFi or ethernet) | Monitor, HDMI cable, mouse, keyboard | . ",
    "url": "/Robot_MuSHR/docs/3_the_race_rebot/3_robot_software_setup/#software-overview",
    "relUrl": "/docs/3_the_race_rebot/3_robot_software_setup/#software-overview"
  },"39": {
    "doc": "Robot Software Setup",
    "title": "Booting Up",
    "content": ". | Power on and boot the Jetson. The green light on the right side should turn on. | Plug a monitor, keyboard, and mouse into the car. | Follow the on-screen prompts to complete setup of the Jetson Nano operating system. we suggest using the following values: Username: robot Name: robot Computer Name: goose . | . ",
    "url": "/Robot_MuSHR/docs/3_the_race_rebot/3_robot_software_setup/#booting-up",
    "relUrl": "/docs/3_the_race_rebot/3_robot_software_setup/#booting-up"
  },"40": {
    "doc": "Robot Software Setup",
    "title": "Setup Wi-Fi",
    "content": "You need to set the car up with a static IP if you want to install additional software on the car, or be able to use the internet on your laptop while connected to the car. But most computers do not have a static IP. #TODO . ",
    "url": "/Robot_MuSHR/docs/3_the_race_rebot/3_robot_software_setup/#setup-wi-fi",
    "relUrl": "/docs/3_the_race_rebot/3_robot_software_setup/#setup-wi-fi"
  },"41": {
    "doc": "Robot Software Setup",
    "title": "Connect the bluetooth controller",
    "content": "Connect to PS4 controller, for the first time: Build Instructions - MuSHR: The UW Open Racecar Project . if there already are “wireless controller”, remove them first, because all the controllers use the same name. ",
    "url": "/Robot_MuSHR/docs/3_the_race_rebot/3_robot_software_setup/#connect-the-bluetooth-controller",
    "relUrl": "/docs/3_the_race_rebot/3_robot_software_setup/#connect-the-bluetooth-controller"
  },"42": {
    "doc": "Robot Software Setup",
    "title": "Setup Docker &amp; Install MuSHR stack",
    "content": "Robot setup is similar to the simulation setup. Follow the following from the MuSHR simulation setup. ",
    "url": "/Robot_MuSHR/docs/3_the_race_rebot/3_robot_software_setup/#setup-docker--install-mushr-stack",
    "relUrl": "/docs/3_the_race_rebot/3_robot_software_setup/#setup-docker--install-mushr-stack"
  },"43": {
    "doc": "Robot Software Setup",
    "title": "Launching Teleoperation",
    "content": "First, all ROS commands must be run inside a docker container. If you need to create multiple terminal sessions we recommend entering one docker container then using tmux (pre-installed). That way you only need to remember to run mushr_noetic once. Or if you are using Visual Studio Code, it is even better, because you can check and modifiy the files in it, and create as much terminals as you want. For the first time, you can connet to the car, start the MuSHR_noetic, and then connet to the continar running on the car. After that, Visual Studio Code will remenber it that next time you can start the continar directly with it. Turn on the car and vesc by plugging their batteries in. Enter the docker container. $ mushr_noetic or $ docker exec -it [CONTAINER_ID] bash if you don’t want to start a new container. Then in the same terminal (within the Docker container), run teleop. $ roslaunch mushr_base teleop.launch . You should see the lidar spinning and be able to steer with the controller. (Activate all sensors by default.) . ",
    "url": "/Robot_MuSHR/docs/3_the_race_rebot/3_robot_software_setup/#launching-teleoperation",
    "relUrl": "/docs/3_the_race_rebot/3_robot_software_setup/#launching-teleoperation"
  },"44": {
    "doc": "Robot Software Setup",
    "title": "Teleoperation (manual driving)",
    "content": ". #TODO . ",
    "url": "/Robot_MuSHR/docs/3_the_race_rebot/3_robot_software_setup/#teleoperation-manual-driving",
    "relUrl": "/docs/3_the_race_rebot/3_robot_software_setup/#teleoperation-manual-driving"
  },"45": {
    "doc": "Robot Software Setup",
    "title": "Visualization",
    "content": "After starting up, the robot terminal should print out a line similar to Rosbridge WebSocket server started at ws://0.0.0.0:9090. Unlike simulation, visualization usually is run on a separate computer (though you can install Foxglove on the robot). From the Foxglov tutorial complete the following steps on your separate visualization computer. Fill out the WebSocket URL with the robot’s IP and port that the simulator output before. ",
    "url": "/Robot_MuSHR/docs/3_the_race_rebot/3_robot_software_setup/#visualization",
    "relUrl": "/docs/3_the_race_rebot/3_robot_software_setup/#visualization"
  },"46": {
    "doc": "Stop the container and shut down the robot",
    "title": "Stop the container and shut down the robot",
    "content": " ",
    "url": "/Robot_MuSHR/docs/4_remotely_control_the_robot_with_another_pc/3_stop_the_container_&_shut_down_the_robot/",
    "relUrl": "/docs/4_remotely_control_the_robot_with_another_pc/3_stop_the_container_&_shut_down_the_robot/"
  },"47": {
    "doc": "Stop the container and shut down the robot",
    "title": "1. first stop the container:",
    "content": ". | In the bash of the container, run $exit . | Or in the bash of the robot, run $docker stop [container_ID] . You will lose the connection in a few seconds. ",
    "url": "/Robot_MuSHR/docs/4_remotely_control_the_robot_with_another_pc/3_stop_the_container_&_shut_down_the_robot/#1-first-stop-the-container",
    "relUrl": "/docs/4_remotely_control_the_robot_with_another_pc/3_stop_the_container_&_shut_down_the_robot/#1-first-stop-the-container"
  },"48": {
    "doc": "Stop the container and shut down the robot",
    "title": "2. Then shut down the TX2(robot), In the bash of the robot:",
    "content": "$ sudo shutdown -P now . You will lose the connection in a few seconds too. | . ",
    "url": "/Robot_MuSHR/docs/4_remotely_control_the_robot_with_another_pc/3_stop_the_container_&_shut_down_the_robot/#2-then-shut-down-the-tx2robot-in-the-bash-of-the-robot",
    "relUrl": "/docs/4_remotely_control_the_robot_with_another_pc/3_stop_the_container_&_shut_down_the_robot/#2-then-shut-down-the-tx2robot-in-the-bash-of-the-robot"
  },"49": {
    "doc": "Applying deep learning on MuSHR",
    "title": "Applying deep learning on MuSHR",
    "content": "This tutorial is all about knowing how you can accomplish the task of deep learning on mushr. ",
    "url": "/Robot_MuSHR/docs/2_mushr/4_apply_dl_on_mushr/",
    "relUrl": "/docs/2_mushr/4_apply_dl_on_mushr/"
  },"50": {
    "doc": "Applying deep learning on MuSHR",
    "title": "Table of contents",
    "content": ". | Applying deep learning on MuSHR . | Data connection (manualy) | . | . ",
    "url": "/Robot_MuSHR/docs/2_mushr/4_apply_dl_on_mushr/#table-of-contents",
    "relUrl": "/docs/2_mushr/4_apply_dl_on_mushr/#table-of-contents"
  },"51": {
    "doc": "Applying deep learning on MuSHR",
    "title": "Data connection (manualy)",
    "content": ". | The race car is powered on. | Connect PS4 joystick. Refer to the Connect the bluetooth controller. | Launch teleop.launch. $ roslaunch mushr_base teleop.launch Make sure the sensor you need is active. And check the topic of relevant data. | . Here are some key topics . Intel® RealSense™ Tracking Camera T265 . /car/camera/accel/sample: IMU accelerate data . /car/camera/fisheye1/image_raw: Image data from one of the fisheye cameras . /car/camera/fisheye2/image_raw: Image data from the other one of the fisheye cameras . /car/camera/gyro/sample: IMU ayro data . /car/camera/odom/sample: IMU odom data . Intel® RealSense™ Depth Camera D435i . /car/cameraD435i/color/image_raw: Image data . LiDAR . /car/scan: LiDAR point cloud data . VESC&amp;Mux . /car/vesc/commands/motor/speed: Motor speed . /car/vesc/commands/servo/position: Rotation angle of the servo . /car/mux/ackermann_cmd_mux/output: Output of speed and angle information . header: seq: 34296 stamp: secs: 0 nsecs: 0 frame_id: '' drive: steering_angle: -0.32584002614 #Steering angle, interchangeable with Servo position steering_angle_velocity: 0.0 speed: 0.0 # Speed, interchangeable with Motor speed acceleration: 0.0 jerk: 0.0 . | Select the topics related to the data to be collected and run the bag record: | . rosbag record [topic1] [topic2] [topic3] . | Now, use ps4 to steer your car around the track to collect data. | . The image and point cloud data is large, so pay attention to the memory capacity or you will have lag and other problems. | When you think you’re almost done collecting data, in the window running rosbag record exit with a Ctrl-C. Now examine the contents of the directory where the terminal is running. You should see a file with a name that begins with the year, data, and time and the suffix .bag. | . we can examine it and play it back using the commands rosbag info &lt;your bagfile&gt; and rosbag play &lt;your bagfile&gt;. ",
    "url": "/Robot_MuSHR/docs/2_mushr/4_apply_dl_on_mushr/#data-connection-manualy",
    "relUrl": "/docs/2_mushr/4_apply_dl_on_mushr/#data-connection-manualy"
  },"52": {
    "doc": "Control robot with a PS4 controller",
    "title": "Control robot with a PS4 controller",
    "content": " ",
    "url": "/Robot_MuSHR/docs/3_the_race_rebot/4_control_robot_w_a_ps4_controller/",
    "relUrl": "/docs/3_the_race_rebot/4_control_robot_w_a_ps4_controller/"
  },"53": {
    "doc": "Control robot with a PS4 controller",
    "title": "1. Connect the PS4 controller to the TX2, for the first time",
    "content": "Build Instructions - MuSHR: The UW Open Racecar Project . i. Press the “P” and “share” buttons of the PS4 controller at the same time, and the light will flash with high frequency, and the ps4 controller will on a pairing mode . ii. On TX2, go to the blue tooth setting. If there already is a “wireless controller”, remove them first, because all the controllers use the same name. iii. search for “Wireless Device”, you can choose the device type as input to specify the right devices. vi. When the controller is detected, click it to connect. Once you connected your control, next time you only need to turn on the controller and it will be auto-connect to the TX2. ",
    "url": "/Robot_MuSHR/docs/3_the_race_rebot/4_control_robot_w_a_ps4_controller/#1-connect-the-ps4-controller-to-the-tx2-for-the-first-time",
    "relUrl": "/docs/3_the_race_rebot/4_control_robot_w_a_ps4_controller/#1-connect-the-ps4-controller-to-the-tx2-for-the-first-time"
  },"54": {
    "doc": "Control robot with a PS4 controller",
    "title": "2. Contro the race robot with a PS4 controller",
    "content": "Build Instructions - MuSHR: The UW Open Racecar Project. Push L1 to use it . ",
    "url": "/Robot_MuSHR/docs/3_the_race_rebot/4_control_robot_w_a_ps4_controller/#2-contro-the-race-robot-with-a-ps4-controller",
    "relUrl": "/docs/3_the_race_rebot/4_control_robot_w_a_ps4_controller/#2-contro-the-race-robot-with-a-ps4-controller"
  },"55": {
    "doc": "Set up Docker & Install the MuSHR stack",
    "title": "Set up Docker &amp; Install the MuSHR stack",
    "content": "We will work directly on TX2. Here are the essential steps for us. ",
    "url": "/Robot_MuSHR/docs/3_the_race_rebot/5_set_up_docker_&_install_the_mushr_stack/#set-up-docker--install-the-mushr-stack",
    "relUrl": "/docs/3_the_race_rebot/5_set_up_docker_&_install_the_mushr_stack/#set-up-docker--install-the-mushr-stack"
  },"56": {
    "doc": "Set up Docker & Install the MuSHR stack",
    "title": "Setup Docker",
    "content": "REF . 1. Install the Compose plugin . never install the docker engine already installed on Jetson TX2 default. Step 1: Set up the repository. Find distro-specific instructions in the link below for your system. Perform the steps at Set up the repository. Do not continue to Install Docker Engine! . Back to the Install the Compose plugin and continue with step 2. Step 2: run the commands depending on your system. Step 3: Verify that docker-compose is installed correctly. You can always check with this command if needed. 2. Manage docker as a non-root user . Following the tutorial - Linux post-installation steps for Docker Engine. Reboot TX2 after this. Otherwise, before you reboot, you need to run . $ newgrp docker . every time when you launch a new terminal, otherwise, you won’t run docker commands without sudo. ",
    "url": "/Robot_MuSHR/docs/3_the_race_rebot/5_set_up_docker_&_install_the_mushr_stack/#setup-docker",
    "relUrl": "/docs/3_the_race_rebot/5_set_up_docker_&_install_the_mushr_stack/#setup-docker"
  },"57": {
    "doc": "Set up Docker & Install the MuSHR stack",
    "title": "Install MuSHR stack",
    "content": "1. Clone mushr stack . Suggest cloning it to your SD card because TX2 doesn’t have too many memories. $ mkdir -p [your_path]/catkin_ws/src $ cd catkin_ws/src $ git clone --branch noetic https://github.com/prl-mushr/mushr.git . You can also download it from our GitHub . 2. Docker setting . a. Suggest using our docker image . Go to the file [your_path]/catkin_ws/src/mushr/mushr_utils/install/docker-compose-robot.yml, modify the parameter image: ... services: mushr_noetic: image: pdaelm/imredd_mushr:02_2023 # mushr/mushr:${MUSHR_OS_TYPE} ... b. Attaches the catkin_ws volume so you can edit code outside or inside the docker container . Got to the file [your_path]/catkin_ws/src/mushr/mushr_utils/install/docker-compose-robot.yml, add below to the Volumes parameter: ... volumes: ... - ${MUSHR_WS_PATH}/catkin_ws:/root/catkin_ws ... c. Run the installation script . $ [path]/catkin_ws/src/mushr/mushr_utils/install/mushr_install.bash . It will prompt you with two questions. For running the MuSHR robot, the answer should be [yes] and [no]. This will install a series of necessary packages, and create a script mushr_noetic in /usr/local/bin which initializes a docker container with all of the mushr configs installed. Watch out for the log: . Warnings of git are ok because you may already have the directories and don’t need to update them. Failure is not ok: “failure to make file /usr/local/bin/mushr_noetic” may cause the failure to run the command $ mushr_noetic. Normally it becaus there is already a mushr_noetic file exit. You should: . | delete it with root authority $ sudo rm /usr/local/bin/mushr_noetic . | And run the install .bash file again $ [path]/catkin_ws/src/mushr/mushr_utils/install/mushr_install.bash . | . d. Launch mushr_noetic docker continar . Close the terminal and open a new one, start a container: . $ mushr_noetic . (The first time running this command will take some time to download the Docker image.) . if you run the mushr_noetic before and you want to start the same container, try:$ docker start [container_ID] &amp;&amp; docker exec -it [container_ID] bash. e. catkin build . In the container(same terminal), run catkin build: . $ cd catkin_ws &amp;&amp; catkin build $ cd &amp;&amp; source .bashrc . (you only do it for the first time when you start a new container or you add new files in catkin_ws) . f. Modify the parameters of ros_ip in .bashrc: . $ export ROS_HOSTNAME=localhost [sugesst] . or . $ export ROS_IP=[IP] . when your IP is static, otherwise you need to modify it every time when your IP changes, you can check it with $ ifconfig and wlan0:…inet:[IP]… . To check the .bashrc file in the container, you have two ways: . | In the container bash terminal: $ vim .bashr | In the VS code attached to the container: Directly click the file .bashrc under the /root/ | . You can also use these two ways above to modify the .bashrc file.bashrc is a file in the docker container, you have to commit to persist it. But sometimes it may doesn’t work. If you wait too long and you see the error below when you launch a .launch file, most probably the IP address is incorrect, run the $ export ROS_HOSTNAME=localhost again. g. Launch ROS teleop . $ roslaunch mushr_base teleop.launch . Make sure no errors are reported. [control + c] to stop it. More sensors(cameras) setting: . | Depth image data: set the parameters: depth from false to true in [path]/catkin_ws/src/mushr/mushr_hardware/mushr_hardware/launch/racecar-uw-tx2/sensor.launch or [path]/catkin_ws/src/mushr/mushr_hardware/realsense/realsense2_camera/launch/rs_camera.launch | Set the parameters of fisheyes from false to true in rs_camera.launch | . Now you can control the robot with a PS4 controller. h. Exit the container bash Just run: . $ exit . Supplements: . | Check container ID and image_name: $ docker ps -a (to check the container info) . | [do it every time you make changes in the container] The files made inside the docker container will only persist if you commit. Re-open a new terminal: $ docker commit [container_ID] [image_name] . | If you need more terminal windows in the container, there are three ways to reach it: . i. Open a new terminal, check the container ID, and go to its bash: $ docker exec -it [container ID] bash . ii. Tmux: Getting Started · tmux/tmux Wiki · GitHub . iii. VS code [suggestion]: . a. (if on another PC) connect vs code to remote: ssh robot@[IP address] b. Launch the container if you don’t have one, and connect vs code to the container c. Open the terminal in VS code as much as you want . We suggest using this on your own PC because launching VS code also costs the memories of TX2 which is not too much. | . ",
    "url": "/Robot_MuSHR/docs/3_the_race_rebot/5_set_up_docker_&_install_the_mushr_stack/#install-mushr-stack",
    "relUrl": "/docs/3_the_race_rebot/5_set_up_docker_&_install_the_mushr_stack/#install-mushr-stack"
  },"58": {
    "doc": "Set up Docker & Install the MuSHR stack",
    "title": "Set up Docker & Install the MuSHR stack",
    "content": " ",
    "url": "/Robot_MuSHR/docs/3_the_race_rebot/5_set_up_docker_&_install_the_mushr_stack/",
    "relUrl": "/docs/3_the_race_rebot/5_set_up_docker_&_install_the_mushr_stack/"
  },"59": {
    "doc": "Tuning",
    "title": "Tuning Guide",
    "content": "The alignment of the hardware is critical for them to be able to work. With increased use, there will be some looseness or misalignment on the race car. Regular adjustments are very important, especially if you find that it doesn’t work well no matter what. If incorrectly tuned, the commands applied by your autonomous controller may not correspond to what’s being executed on the physical hardware, making it difficult to debug issues with the controller. Requirements . | A computer that can ssh into your car. | A tape measure. | Find a relatively open space to run your car. We’ll be driving it straight for ~9ft (3m) and turning in a semi-circle of diameter ~6ft (2m). | . The file will be located at: ~/catkin_ws/src/mushr_base/vesc/vesc_main/config/racecar-uw-nano/vesc.yaml. The file will look like this: . # erpm (electrical rpm) = speed_to_erpm_gain * speed (meters / second) + speed_to_erpm_offset #-4614 speed_to_erpm_gain: -2000 speed_to_erpm_offset: 0.0 [...omited for brevity] # servo value (0 to 1) = steering_angle_to_servo_gain * steering angle (radians) + steering_angle_to_servo_offset steering_angle_to_servo_gain: 1.2135 steering_angle_to_servo_offset: 0.55 . ",
    "url": "/Robot_MuSHR/docs/3_the_race_rebot/6_tuning/#tuning-guide",
    "relUrl": "/docs/3_the_race_rebot/6_tuning/#tuning-guide"
  },"60": {
    "doc": "Tuning",
    "title": "Steering Angle Offset",
    "content": "This offset sets the default servo position when the car is driving straight. You will be changing the variable: steering_angle_to_servo_offset. Tuning loop: While the car doesn’t drive straight, do the following procedure: . | Start teleop: $ roslaunch mushr_base teleop.launch | Drive car in a straight line a few times. It’s never going to be perfectly straight, so as long as it goes straight most of the time, it’ll be fine. | Adjust steering_angle_offset in vesc.yaml. Increase the offset if the car veers too much left, decrease if it veers too much right. | Stop teleop (Ctrl-C in the window you started teleop.launch in) and go back to Step 1. | . Usually this value is between 0.4 and 0.6 . ",
    "url": "/Robot_MuSHR/docs/3_the_race_rebot/6_tuning/#steering-angle-offset",
    "relUrl": "/docs/3_the_race_rebot/6_tuning/#steering-angle-offset"
  },"61": {
    "doc": "Tuning",
    "title": "Speed to ERPM Gain",
    "content": "This gain converts velocity to ERPM. You will be changing the variable: speed_to_erpm_gain. The conversion from velocity to ERPM and steering angle to servo position is a linear function of the input command: output = f(command) = gain * command + bias . Before tuning:Extend your tape measure to around 9-10 ft on the floor. Tuning loop: . | Place car at the base of the tape measure with the back wheelbase (indicated with a white line) lined up with 0. ~ | Start teleop. $ roslaunch mushr_base teleop.launch | Open another terminal on the car and run the command: $ rostopic echo /car/vesc/odom/pose/pose/position/x This will echo all the odometry information – how far the car has driven (in meters) in the x direction since teleop started. The value should be 0.0 at the start, as the car hasn’t moved yet. | Drive the car forward about 7-8 ft. The car will drive slightly further as it decelerates and stops. Make sure you only drive forward, not altering the servo position, otherwise you’ll have both x and y directional changes. | Record the distance traveled and convert to meters. | Compare to output of the rostopic echo command’s x value. If the reported distance traveled is larger than the actual, decrease the gain. If the reported distance is smaller, increase the gain. At the begining increasing or decreasing by 500 should allow you to quickly hone in on the value. | Stop teleop. Go back to step 1 if the values are not sufficiently close (within 2-3 cm). | . This value can vary, but it should be on the order of thousands (2000-5000) . ",
    "url": "/Robot_MuSHR/docs/3_the_race_rebot/6_tuning/#speed-to-erpm-gain",
    "relUrl": "/docs/3_the_race_rebot/6_tuning/#speed-to-erpm-gain"
  },"62": {
    "doc": "Tuning",
    "title": "Steering Angle Gain",
    "content": "This gain takes a steering angle in radians and converts it to a servo position. You will be changing the variable: steering_angle_to_servo_gain. In order to find the desired turn radius, we look to the kinematic car model. At low enough speeds (avoiding slipping and skidding) this model farily accurately represents the movement of the car. The turn radius is: R = L/2sin(beta), where L is the length of the car (0.3 meters), and beta is arctan(1/2 * tan(delta)), where delta is the steering angle. We will be setting the steering angle to the max (0.34 by default). We will instead the length of a half cirlce, so 2 * R. Calculting this with the defaults, comes out to 1.722 meters (67.79 inches). If you tweak the max steering angle, or change the chassis, you will have to recompute this number. There are two links can fate your caculating: . | Angle Conversion Calculator | Equation Calculator | . Before tuning: Extend your tape measure to around 7-8 ft on the floor. Tuning loop: . | Place car at the base of the tape measure with the back wheelbase (indicated with a white line) lined up with 0. | Start teleop. $ roslaunch mushr_base teleop.launch | Command the steering wheel max in whichever direction the measurement tape is. (Left and right are to be done separately) | Run the car such that the car has run over the tape and the back wheel is on the tape (see image). ~ | Record the distance. The goal distance is 1.722 meters (67.79 inches). If it overshot, increase the gain, if it undershot, decrease the gain. | . This value should be around 1.1-1.3 . ",
    "url": "/Robot_MuSHR/docs/3_the_race_rebot/6_tuning/#steering-angle-gain",
    "relUrl": "/docs/3_the_race_rebot/6_tuning/#steering-angle-gain"
  },"63": {
    "doc": "Tuning",
    "title": "Tuning",
    "content": " ",
    "url": "/Robot_MuSHR/docs/3_the_race_rebot/6_tuning/",
    "relUrl": "/docs/3_the_race_rebot/6_tuning/"
  },"64": {
    "doc": "Problem Solving",
    "title": "Hardware Problem Solving",
    "content": " ",
    "url": "/Robot_MuSHR/docs/3_the_race_rebot/7_problem_solving/#hardware-problem-solving",
    "relUrl": "/docs/3_the_race_rebot/7_problem_solving/#hardware-problem-solving"
  },"65": {
    "doc": "Problem Solving",
    "title": "How Do I rescue over-drained LiPo batteries?",
    "content": "The usable voltage range for a standard lipo battery cell is 3.2v to 4.2v. Any lower than 3.2v and the battery may be permanently damaged. Any higher than 4.2v and you significantly increase the risk of a battery bursting into flames. Check battery voltage . | Connect the main and the sub plugs of your LiPo battery to your charger. Note the positive(+, red) and negative(-, black) sides of the sub-plug. | Select User Program - Cell Meter, press ENTER. | Now the voltage information will showed on the screen. The total voltage for all cells, the highest and the lowest cell voltage. | Press ENTER once more, the voltage for each cell will show on the scree. | . When the battery voltage is too low to charge, you should replace the battery as it is no-longer going to function properly. But you might also be-able to rescue that battery and use it for a bit longer. If you attempt to rescue a battery using these instructions you do so at your own risk. If you are not comfortable with the possibility that your battery may catch fire, you may just want to discard the battery. Rescue over-drained LiPo batteries . REF . | Connect the main plug of your LiPo battery to your charger and chose the User Program - Select NiMH. Start charge at the lowest current(0.1A) possible. Select a voltage the matches your LiPo battery’s nominal voltage. | After a minute or two your battery should recover to about 3.3 volts per cell. To check this simply read the total voltage of your battery and divide that by the number of cells. | When the total voltage is equal to about 3.3 volts per cell you can stop the NiMH charging and switch to LiPo charging. | Connect bothe the main and the sub plug of your LiPo battery to your charger. Select User Program - Select LiPo. Then select LiPo balance charge at 0.5C (A = mAh * C / 1000) rating and a voltage the matches your LiPo battery’s nominal voltage. This will take longer than charging at 1C but is safer. | Once the balance charge has completed balancing you should have a fully recovered LiPo battery. | . If you are unable to restore the voltage by this method, your battery may be permanently damaged and it is recommended not to use it again. ",
    "url": "/Robot_MuSHR/docs/3_the_race_rebot/7_problem_solving/#how-do-i-rescue-over-drained-lipo-batteries",
    "relUrl": "/docs/3_the_race_rebot/7_problem_solving/#how-do-i-rescue-over-drained-lipo-batteries"
  },"66": {
    "doc": "Problem Solving",
    "title": "Problem Solving",
    "content": " ",
    "url": "/Robot_MuSHR/docs/3_the_race_rebot/7_problem_solving/",
    "relUrl": "/docs/3_the_race_rebot/7_problem_solving/"
  },"67": {
    "doc": "Home",
    "title": "Robotics and Simulation Guidebook",
    "content": "Mushr-based robotics and simulation guidebook. Get started now View it on GitHub . ",
    "url": "/Robot_MuSHR/#robotics-and-simulation-guidebook",
    "relUrl": "/#robotics-and-simulation-guidebook"
  },"68": {
    "doc": "Home",
    "title": "About the project",
    "content": "License . Some of the Mushr-related content in this guidebook is © by MuSHR. The web template(Just the Docs) is distributed by an MIT license. Contributing . When contributing to this repository, please first discuss the change you wish to make via issue, email, or any other method with the owners of this repository before making a change. Read more about becoming a contributor in our GitHub repo. Thank you to the contributors of MuSHR Guidebook! . ",
    "url": "/Robot_MuSHR/#about-the-project",
    "relUrl": "/#about-the-project"
  },"69": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "/Robot_MuSHR/",
    "relUrl": "/"
  }
}
